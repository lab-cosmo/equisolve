[tox]
ignore_basepython_conflict = true
# these are the default environments, i.e. the list of tests running when you
# execute `tox` in the command-line without anything else
envlist =
    tests
    lint

lint_folders = {toxinidir}/examples {toxinidir}/src {toxinidir}/tests {toxinidir}/setup.py

[testenv]

[testenv:tests]
# this environement runs Python tests

setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
usedevelop = true
# installs dependencies we need for testing
# by using tox the developer don't need to manage this dependencies
# him/herself
deps =
    ase
    coverage[toml]
    hypothesis
    pytest
    pytest-cov
    rascaline @ https://github.com/luthaf/rascaline/archive/master.zip
# before running the tests erases any prerecord of coverage
commands_pre =
    coverage erase
# execute pytest
commands =
    pytest --cov --cov-report=term-missing --cov-append --cov-config=.coveragerc -vv --hypothesis-show-statistics {posargs}
# after executing the pytest assembles the coverage reports
commands_post =
    coverage report
    coverage html
    coverage xml

[testenv:lint]
# this environement lints the Python code with flake8 (code linter), black (code
# formatter), and isort (sorting of imports)
skip_install = true
deps =
    flake8
    flake8-bugbear
    black
    isort
commands =
    flake8 {[tox]lint_folders}
    black --check --diff {[tox]lint_folders}
    isort --check-only --diff {[tox]lint_folders}

[testenv:format]
# Abuse tox to do actual formatting. Users can call `tox -e format` to run
# formatting on all files
skip_install = true
deps =
    black
    isort
commands =
    black {[tox]lint_folders}
    isort {[tox]lint_folders}

[testenv:docs]
usedevelop = true
# this environement builds the documentation with sphinx
deps =
    -r docs/requirements.txt
commands = sphinx-build {posargs:-E} -W -b html docs/src docs/build/html

[testenv:build]
# Make sure we can build sdist and a wheel for python
deps =
    build
    check-manifest
    twine
allowlist_externals =
    bash
commands =
    # check building sdist and wheels from a checkout
    python -m build
    twine check dist/*.tar.gz
    twine check dist/*.whl
    check-manifest {toxinidir}

    # check building wheels from the sdist
    bash -c "pip wheel --verbose dist/equisolve-*.tar.gz -w dist/test"

[flake8]
max_line_length = 88
extend-ignore = E203